{"version":3,"sources":["components/MovieCard/MovieCard.js","api.js","components/MoviesList/MoviesList.js","redux/store.js","components/History/History.js","components/FindMovie/FindMovie.js","components/Preview/Preview.js","components/Pagination/Pagination.js","App.js","index.js"],"names":["MovieCard","Title","Poster","className","src","alt","OMDB_API","MoviesList","movies","setSelectedMovie","setPreview","handleSelect","selectedMovie","fetch","then","response","json","api","movie","map","role","onClick","imdbID","key","imdbId","defaultProps","initialState","page","query","searchResults","history","selectors","state","actions","type","store","createStore","action","applyMiddleware","thunk","History","dispatch","useDispatch","useSelector","item","FindMovie","loadMovies","useState","isHistoryVisible","setIsHistoryVisible","useEffect","onSubmit","event","preventDefault","htmlFor","id","placeholder","value","onChange","target","Preview","Actors","Awards","Country","Director","Genre","Language","Plot","Production","Released","Runtime","Writer","imdbRating","imdbVotes","Pagination","totalPages","Math","ceil","handlePage","pageNum","disabled","App","preview","title","moviesFromServer","Search","totalResults","localStorage","getItem","JSON","parse","setItem","stringify","titleQuery","total","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f160555.chunk.js","sourcesContent":["import React from 'react';\n\nimport './MovieCard.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Poster,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n};\n","const OMDB_API = 'https://www.omdbapi.com/?apikey=65c1586c&';\n\nexport const getMovies = (title, page) => (\n  fetch(`${OMDB_API}s=${title}&page=${page}`)\n    .then(response => response.json())\n);\n\nexport const getSelectedMovie = selectedMovie => (\n  fetch(`${OMDB_API}i=${selectedMovie}`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport * as api from '../../api';\n\nexport const MoviesList = ({\n  movies = [],\n  setSelectedMovie,\n  setPreview,\n}) => {\n  const handleSelect = (selectedMovie) => {\n    setSelectedMovie(selectedMovie);\n    api.getSelectedMovie(selectedMovie)\n      .then(movie => setPreview(movie));\n  };\n\n  return (\n    <div className=\"movies\">\n      {movies\n        .map(movie => (\n          <div\n            role=\"presentation\"\n            onClick={() => handleSelect(movie.imdbID)}\n          >\n            <MovieCard\n              key={movie.imdbId}\n              {...movie}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setSelectedMovie: PropTypes.func,\n  setPreview: PropTypes.func,\n};\n\nMoviesList.defaultProps = {\n  setSelectedMovie: null,\n  setPreview: null,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst initialState = {\n  movies: [],\n  page: 1,\n  query: '',\n  searchResults: 0,\n  history: [],\n};\n\nexport const selectors = {\n  getMovies: state => state.movies,\n  getPage: state => state.page,\n  getQuery: state => state.query,\n  getSearchResults: state => state.searchResults,\n  getHistory: state => state.history,\n};\n\nconst SET_MOVIES = 'SET_MOVIES';\nconst SELECT_PAGE = 'SELECT_PAGE';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_HISTORY = 'SET_HISTORY';\nconst SET_SEARCH_RESULTS = 'SET_SEARCH_RESULTS';\n\nexport const actions = {\n  setMovies: movies => ({\n    type: SET_MOVIES,\n    movies,\n  }),\n  selectPage: page => ({\n    type: SELECT_PAGE,\n    page,\n  }),\n  setQuery: query => ({\n    type: SET_QUERY,\n    query,\n  }),\n  setHistory: query => ({\n    type: SET_HISTORY,\n    query,\n  }),\n  setSearchResults: searchResults => ({\n    type: SET_SEARCH_RESULTS,\n    searchResults,\n  }),\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MOVIES:\n      return {\n        ...state,\n        movies: action.movies,\n      };\n\n    case SELECT_PAGE:\n      return {\n        ...state,\n        page: action.page,\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query,\n      };\n\n    case SET_HISTORY:\n      return {\n        ...state,\n        history: [...state.history, action.query],\n      };\n\n    case SET_SEARCH_RESULTS:\n      return {\n        ...state,\n        searchResults: action.searchResults,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './History.scss';\n\nimport { actions, selectors } from '../../redux/store';\n\nexport const History = () => {\n  const dispatch = useDispatch();\n  const history = useSelector(selectors.getHistory);\n\n  return (\n    <ul className=\"history__list\">\n      {history.map(item => (\n        <li\n          className=\"history__item\"\n          role=\"presentation\"\n          key={item}\n          onClick={() => dispatch(actions.setQuery(item))}\n        >\n          {item}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './FindMovie.scss';\n\nimport { actions, selectors } from '../../redux/store';\nimport { History } from '../History/History';\n\nexport const FindMovie = ({ loadMovies }) => {\n  const [isHistoryVisible, setIsHistoryVisible] = useState(false);\n\n  const dispatch = useDispatch();\n  const query = useSelector(selectors.getQuery);\n\n  useEffect(() => {\n    loadMovies();\n  }, [query]);\n\n  const handleChanges = (event) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    loadMovies();\n    dispatch(actions.setHistory(query));\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control search-input\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n              value={query}\n              onChange={handleChanges}\n            />\n          </div>\n\n          <button\n            className=\"button is-light\"\n            type=\"button\"\n            onClick={() => setIsHistoryVisible(!isHistoryVisible)}\n          >\n            {isHistoryVisible ? `Hide ` : `Show `}\n            search history\n          </button>\n          {isHistoryVisible\n          && <History />}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  loadMovies: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Preview.scss';\n\nexport const Preview = (\n  {\n    Title,\n    Poster,\n    Actors,\n    Awards,\n    Country,\n    Director,\n    Genre,\n    Language,\n    Plot,\n    Production,\n    Released,\n    Runtime,\n    Writer,\n    imdbRating,\n    imdbVotes,\n  },\n) => (Title && Poster && Plot ? (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        <p>\n          <strong>Actors: </strong>\n          {Actors}\n        </p>\n        <p>\n          <strong>Awards: </strong>\n          {Awards}\n        </p>\n        <p>\n          <strong>Country: </strong>\n          {Country}\n          {` `}\n          <strong>Language: </strong>\n          {Language}\n        </p>\n        <p>\n          <strong>Director: </strong>\n          {Director}\n          {` `}\n          <strong>Writer: </strong>\n          {Writer}\n        </p>\n        <p>\n          <strong>Genre: </strong>\n          {Genre}\n        </p>\n        <p>\n          <strong>Production: </strong>\n          {Production}\n        </p>\n        <p>\n          <strong>Runtime: </strong>\n          {Runtime}\n        </p>\n        <p>\n          <strong>Released: </strong>\n          {Released}\n        </p>\n        <p>\n          <strong>imdbRating: </strong>\n          {imdbRating}\n          {` `}\n          <strong>imdbVotes: </strong>\n          {imdbVotes}\n        </p>\n        <p>\n          <strong>Description: </strong>\n          {Plot}\n        </p>\n      </div>\n    </div>\n  </div>\n) : (\n  <p>Loading...</p>\n));\n\nPreview.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Poster: PropTypes.string,\n  Actors: PropTypes.string,\n  Awards: PropTypes.string,\n  Country: PropTypes.string,\n  Director: PropTypes.string,\n  Genre: PropTypes.string,\n  Language: PropTypes.string,\n  Plot: PropTypes.string,\n  Production: PropTypes.string,\n  Released: PropTypes.string,\n  Runtime: PropTypes.string,\n  Writer: PropTypes.string,\n  imdbRating: PropTypes.string,\n  imdbVotes: PropTypes.string,\n};\n\nPreview.defaultProps = {\n  Poster: '',\n  Actors: '',\n  Awards: '',\n  Country: '',\n  Director: '',\n  Genre: '',\n  Language: '',\n  Plot: '',\n  Production: '',\n  Released: '',\n  Runtime: '',\n  Writer: '',\n  imdbRating: '',\n  imdbVotes: '',\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './Pagination.scss';\n\nimport { selectors, actions } from '../../redux/store';\n\nexport const Pagination = () => {\n  const dispatch = useDispatch();\n  const page = useSelector(selectors.getPage);\n  const searchResults = useSelector(selectors.getSearchResults);\n\n  const totalPages = Math.ceil(searchResults / 10);\n\n  const handlePage = (pageNum) => {\n    dispatch(actions.selectPage(pageNum));\n  };\n\n  return !searchResults || (\n    <div className=\"pagination\">\n      <button\n        className=\"button is-light\"\n        type=\"button\"\n        onClick={() => handlePage(page - 1)}\n        disabled={page === 1}\n      >\n        {`<`}\n      </button>\n      <span>\n        {` ${page} / ${totalPages} `}\n      </span>\n      <button\n        className=\"button is-light\"\n        type=\"button\"\n        onClick={() => handlePage(page + 1)}\n        disabled={page === totalPages || searchResults < 10}\n      >\n        {`>`}\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Preview } from './components/Preview/Preview';\nimport { Pagination } from './components/Pagination/Pagination';\n\nimport * as api from './api';\nimport { actions, selectors } from './redux/store';\n\nexport const App = () => {\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [preview, setPreview] = useState(null);\n\n  const dispatch = useDispatch();\n  const movies = useSelector(selectors.getMovies);\n  const page = useSelector(selectors.getPage);\n  const query = useSelector(selectors.getQuery);\n  const searchResults = useSelector(selectors.getSearchResults);\n\n  const loadMovies = () => {\n    api.getMovies(query, page)\n      .then((moviesFromServer) => {\n        dispatch(actions.setMovies(moviesFromServer.Search));\n        dispatch(actions.setSearchResults(moviesFromServer.totalResults));\n      });\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem('saved_query')) {\n      dispatch(actions.setQuery(\n        JSON.parse(localStorage.getItem('saved_query')),\n      ));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('saved_query', JSON.stringify(query));\n  }, [query]);\n\n  useEffect(() => {\n    loadMovies();\n\n    dispatch(actions.selectPage(page));\n  }, [page]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movies}\n          setSelectedMovie={setSelectedMovie}\n          setPreview={setPreview}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          loadMovies={loadMovies}\n          searchResults={searchResults}\n          titleQuery={query}\n        />\n        {!selectedMovie || (\n          <div className=\"container\">\n            <h2 className=\"title\">Preview</h2>\n            <Preview {...preview} />\n          </div>\n        )}\n      </div>\n      <Pagination\n        total={searchResults}\n        titleQuery={query}\n        loadMovies={loadMovies}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\n\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}